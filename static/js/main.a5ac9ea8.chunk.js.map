{"version":3,"sources":["model.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Point","x","y","LinkStation","reach","linkStations","points","getPower","linkStation","pointCoordinates","stationReach","distance","linkStationCoordinates","Math","sqrt","pow","getDistance","App","className","map","point","i","key","mostPowerfulStation","Object","entries","length","displayResult","stations","prevPower","reduce","acc","station","power","assign","getStationWithMostPower","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gPAAaA,EACZ,WAAmBC,EAAkBC,GAAY,yBAA9BD,IAA6B,KAAXC,KAGzBC,EACZ,WAAmBF,EAAkBC,EAAkBE,GAAgB,yBAApDH,IAAmD,KAAjCC,IAAiC,KAAfE,SCF3CC,EAA8B,CAC1C,IAAIF,EAAY,EAAG,EAAG,IACtB,IAAIA,EAAY,GAAI,GAAI,GACxB,IAAIA,EAAY,GAAI,EAAG,KAGXG,EAAkB,CAC9B,IAAIN,EAAM,EAAG,GACb,IAAIA,EAAM,IAAK,KACf,IAAIA,EAAM,GAAI,IACd,IAAIA,EAAM,GAAI,KAWFO,EAAW,SACvBC,EACAC,GAEA,IAAMC,EAAeF,EAAYJ,MAEjC,GAAIM,GAAgB,EACnB,OAAO,EAER,IAAMC,EAlBoB,SAC1BC,EACAH,GAF0B,OAI1BI,KAAKC,KACJD,KAAKE,IAAIH,EAAuBX,EAAIQ,EAAiBR,EAAG,GACvDY,KAAKE,IAAIH,EAAuBV,EAAIO,EAAiBP,EAAG,IAYzCc,CAAYR,EAAaC,GAE1C,OAAIE,EAAWD,EACP,EAEDA,EAAeC,GA6CRM,EAfO,WACrB,OACC,yBAAKC,UAAU,OACbZ,EAAOa,KAAI,SAACC,EAAOC,GACnB,OACC,yBAAKC,IAAKD,GAbc,SAC5BE,EACAH,GAEA,OAAOI,OAAOC,QAAQF,GAAqBG,OAApC,uCAC4BN,EAAMnB,EADlC,YACuCmB,EAAMlB,EAD7C,gBACsDqB,EAAoBtB,EAD1E,aACgFsB,EAAoBrB,EADpG,uBACoHqB,EAAoBnB,OAC5I,UAQGuB,CAjCgC,SACtCC,EACAR,GAEA,IAAIS,EAAoB,EACxB,OAAOD,EAASE,QAAO,SAACC,EAAKC,GAC5B,IAAMC,EAAQ1B,EAASyB,EAASZ,GAShC,OARIa,IACCF,GAAOE,EAAQJ,EAClBE,EAAMP,OAAOU,OAAO,GAAIF,IAExBD,EAAMP,OAAOU,OAAO,GAAIF,GACxBH,EAAYI,IAGPF,IACL,IAiBiBI,CAAwB9B,EAAce,GAAQA,GACvD,mCC/DQgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a5ac9ea8.chunk.js","sourcesContent":["export class Point {\n\tconstructor(public x: number, public y: number) {}\n}\n\nexport class LinkStation {\n\tconstructor(public x: number, public y: number, public reach: number) {}\n}\n","import React from 'react';\nimport './App.css';\nimport { Point, LinkStation } from './model';\nexport const linkStations: LinkStation[] = [\n\tnew LinkStation(0, 0, 10),\n\tnew LinkStation(20, 20, 5),\n\tnew LinkStation(10, 0, 12)\n];\n\nexport const points: Point[] = [\n\tnew Point(1, 2),\n\tnew Point(100, 100),\n\tnew Point(15, 10),\n\tnew Point(18, 18)\n];\nexport const getDistance = (\n\tlinkStationCoordinates: LinkStation,\n\tpointCoordinates: Point\n): number =>\n\tMath.sqrt(\n\t\tMath.pow(linkStationCoordinates.x - pointCoordinates.x, 2) +\n\t\t\tMath.pow(linkStationCoordinates.y - pointCoordinates.y, 2)\n\t);\n\nexport const getPower = (\n\tlinkStation: LinkStation,\n\tpointCoordinates: Point\n): number => {\n\tconst stationReach = linkStation.reach;\n\t\n\tif (stationReach <= 0) {\n\t\treturn 0;\n\t}\n\tconst distance = getDistance(linkStation, pointCoordinates);\n\n\tif (distance > stationReach) {\n\t\treturn 0;\n\t}\n\treturn stationReach - distance;\n};\n\nexport const getStationWithMostPower = (\n\tstations: LinkStation[],\n\tpoint: Point\n): LinkStation => {\n\tlet prevPower: number = 0;\n\treturn stations.reduce((acc, station) => {\n\t\tconst power = getPower(station, point);\n\t\tif (power) {\n\t\t\tif (acc && power > prevPower) {\n\t\t\t\tacc = Object.assign({}, station);\n\t\t\t} else {\n\t\t\t\tacc = Object.assign({}, station);\n\t\t\t\tprevPower = power;\n\t\t\t}\n\t\t}\n\t\treturn acc;\n\t}, {} as LinkStation);\n};\n\nexport const displayResult = (\n\tmostPowerfulStation: LinkStation,\n\tpoint: Point\n): string => {\n\treturn Object.entries(mostPowerfulStation).length\n\t\t? `Best link station for point (${point.x},${point.y}) is ${mostPowerfulStation.x}, ${mostPowerfulStation.y} with power ${mostPowerfulStation.reach}`\n\t\t: 'no link';\n};\nconst App: React.FC = () => {\n\treturn (\n\t\t<div className='App'>\n\t\t\t{points.map((point, i) => {\n\t\t\t\treturn (\n\t\t\t\t\t<div key={i}>\n\t\t\t\t\t\t{displayResult(getStationWithMostPower(linkStations, point), point)}\n            <hr></hr>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t})}\n\t\t</div>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}